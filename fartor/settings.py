"""
Django settings for fartor project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def get_env_var(key, default=None):
    # Set a prefix for env variables in order to make env variables dynamic
    prefix = os.environ.get('ENV_PREFIX', 'FARTOR')
    # Get env variables prefix from 'ENV_PREFIX' variable if exists
    return os.environ.get(prefix + '_%s' % key, default)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_var('SECRET_KEY', 'somesecretkey')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_env_var('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = get_env_var('ALLOWED_HOSTS', '*').split(',')

# Application definition

INSTALLED_APPS = [
    # Django apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # custom apps
    # since we need websocket stuff we're gonna use django channels 2 an daphne
    'channels',
    # rest_framework for REST API
    'rest_framework',
    'graphene_django',

    # our apps
    'fartor.apps.accounting.users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # our custom middlewares
    'fartor.modules.django.middlewares.IpMiddleware'
]

ROOT_URLCONF = 'fartor.urls.main'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'fartor/templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fartor.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'HOST': get_env_var('POSTGRES_HOST'),
        'PORT': get_env_var('POSTGRES_PORT'),
        'USER': get_env_var('POSTGRES_USER'),
        'PASSWORD': get_env_var('POSTGRES_PASSWORD'),
        'NAME': get_env_var('POSTGRES_DB'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

CELERY_BROKER_URL = get_env_var("CELERY_BROKER_URL", 'redis://redis:6379/1')
CELERY_RESULT_BACKEND = get_env_var("CELERY_RESULT_BACKEND", 'redis://redis:6379/1')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Register a custom User model for auth
AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    # Use a custom exception handler
    'EXCEPTION_HANDLER': 'fartor.modules.rest.exceptions.custom_exception_handler',
    'VERSIONS': ['1'],
    'VERSION_PARAM': 'v',  # api/v
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
}
# user's password length limit
USERS_MIN_PASSWORD_LENGTH = 8

# set ASGI application for daphne
ASGI_APPLICATION = 'fartor.urls.routing.application'
